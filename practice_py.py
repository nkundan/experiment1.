# -*- coding: utf-8 -*-
"""practice.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zG9FCfAnsNkBOnHo0L7osk5vMH21EiS3
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Sample Data: Days vs Temperature (in Celsius)
days = np.array([1, 2, 3, 4, 5, 6, 7])  # Days of the week
temperature = np.array([30, 32, 34, 33, 31, 29, 28])  # Corresponding temperatures

# Reshape for sklearn compatibility
days = days.reshape(-1, 1)
temperature = temperature.reshape(-1, 1)

# Create a polynomial feature transformer (degree=2 for quadratic)
poly = PolynomialFeatures(degree=2)
days_poly = poly.fit_transform(days)

# Fit the quadratic regression model
model = LinearRegression()
model.fit(days_poly, temperature)

# Predict using the model
temperature_pred = model.predict(days_poly)

# Calculate the Mean Squared Error
mse = mean_squared_error(temperature, temperature_pred)

# Print model coefficients and error
print("Quadratic Equation:")
print(f"Temperature = {model.intercept_[0]:.2f} + {model.coef_[0][1]:.2f}*days + {model.coef_[0][2]:.2f}*days^2")
print(f"Mean Squared Error: {mse:.2f}")

# Plot the results
plt.scatter(days, temperature, color="blue", label="Actual Data")
plt.plot(days, temperature_pred, color="red", label="Quadratic Fit")
plt.xlabel("Days")
plt.ylabel("Temperature (Â°C)")
plt.title("Temperature Modeling Using Quadratic Regression")
plt.legend()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Stage 1: Hard-coded data
days = np.array([1, 2, 3, 4, 5, 6, 7])
temperature = np.array([30, 32, 34, 33, 31, 29, 28])

# Reshape for scikit-learn
days = days.reshape(-1, 1)
temperature = temperature.reshape(-1, 1)

# Polynomial features and model
poly = PolynomialFeatures(degree=2)
days_poly = poly.fit_transform(days)

model = LinearRegression()
model.fit(days_poly, temperature)
temperature_pred = model.predict(days_poly)

# Debugging: Print results
mse = mean_squared_error(temperature, temperature_pred)
print(f"MSE: {mse}")
print("Coefficients:", model.coef_, "Intercept:", model.intercept_)

# Visualization
plt.scatter(days, temperature, color="blue", label="Actual Data")
plt.plot(days, temperature_pred, color="red", label="Quadratic Fit")
plt.xlabel("Days")
plt.ylabel("Temperature")
plt.title("Weather Modeling - Hard-coded Data")
plt.legend()
plt.show()

# Stage 2: Keyboard input
days = input("Enter days as a space-separated list (e.g., 1 2 3 4 5): ").split()
temperature = input("Enter corresponding temperatures: ").split()

# Convert to numpy arrays
days = np.array([int(x) for x in days]).reshape(-1, 1)
temperature = np.array([float(x) for x in temperature]).reshape(-1, 1)

# Polynomial regression as before
poly = PolynomialFeatures(degree=2)
days_poly = poly.fit_transform(days)

model = LinearRegression()
model.fit(days_poly, temperature)
temperature_pred = model.predict(days_poly)

# Debugging: Print results
mse = mean_squared_error(temperature, temperature_pred)
print(f"MSE: {mse}")
print("Coefficients:", model.coef_, "Intercept:", model.intercept_)

# Visualization
plt.scatter(days, temperature, color="blue", label="Actual Data")
plt.plot(days, temperature_pred, color="red", label="Quadratic Fit")
plt.xlabel("Days")
plt.ylabel("Temperature")
plt.title("Weather Modeling - Keyboard Input")
plt.legend()
plt.show()

# Stage 3: Read data from a file
file_name = "/content/weather.csv"

# Read file
days = []
temperature = []

with open(file_name, "/content/weather.csv") as file:
    for line in file:
        day, temp = map(float, line.split())
        days.append(day)
        temperature.append(temp)

# Convert to numpy arrays
days = np.array(days).reshape(-1, 1)
temperature = np.array(temperature).reshape(-1, 1)

# Polynomial regression as before
poly = PolynomialFeatures(degree=2)
days_poly = poly.fit_transform(days)

model = LinearRegression()
model.fit(days_poly, temperature)
temperature_pred = model.predict(days_poly)

# Debugging: Print results
mse = mean_squared_error(temperature, temperature_pred)
print(f"MSE: {mse}")
print("Coefficients:", model.coef_, "Intercept:", model.intercept_)

# Visualization
plt.scatter(days, temperature, color="blue", label="Actual Data")
plt.plot(days, temperature_pred, color="red", label="Quadratic Fit")
plt.xlabel("Days")
plt.ylabel("Temperature")
plt.title("Weather Modeling - File Input")
plt.legend()
plt.show()